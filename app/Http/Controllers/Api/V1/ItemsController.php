<?php

namespace App\Http\Controllers\Api\V1;

use App\Models\Items;
use Illuminate\Http\Request;
use App\Http\Traits\InvoiceTrait;
use App\Http\Controllers\Controller;

/**
 * @class ItemsController
 * @author ANGIE CELESTE PAEZ MONTEJO
 */

class ItemsController extends Controller
{
    use InvoiceTrait;

    /**
     * @method createItem
     * method in charge of creating the invoice, items and the buyer the last two using a trait
     * @param buyer array with buyer information (name, nit)
     * @param invoice array with invoice information (invoice_number, vat_before_value, value_to_pay, vat_id)
     * @param item array whit information items of invoice (description, quantity, unit_value, full_value)
     * @return json response with response to the operation
     */
    public function createItem(Request $request){
        try {
            $invoice_id = $this->createInvoice($request);

            for ($i=0; $i < count($request->item['description']) ; $i++) {
                $item = new Items();
                $item->description = $request->item['description'][$i];
                $item->quantity = $request->item['quantity'][$i];
                $item->unit_value = $request->item['unit_value'][$i];
                $item->full_value = $request->item['full_value'][$i];
                $item->invoice_id = $invoice_id;
                $item->save();
            }

            return response()->json([
                'message' => 'operacion exitosa',
                'status' => 200,
            ]);

        } catch (Exception $e) {

            return response()->json([
                'message' => 'Algo salio mal',
                'error' => $e,
                'status' => 400,
            ]);
        }
    }


    /**
     * @method updateItem
     * method in charge of updating the invoices generated by the system
     * @param buyer array with buyer information (name, nit)
     * @param invoice array with invoice information (invoice_number, vat_before_value, value_to_pay, vat_id)
     * @param id id of invoice for update
     * @param item array whit information items of invoice (description, quantity, unit_value, full_value)
     * @return json response with response to the operation
     */
    public function updateItem(Request $request, $id){
        try {
            $invoice_id = $this->updateInvoice($request, $id);

            for ($i=0; $i < count($request->item['description']) ; $i++) {
                $item = Items::find($request->item['id'][$i]);
                $item->description = $request->item['description'][$i];
                $item->quantity = $request->item['quantity'][$i];
                $item->unit_value = $request->item['unit_value'][$i];
                $item->full_value = $request->item['full_value'][$i];
                $item->save();
            }

            return response()->json([
                'message' => 'Actualizacion Exitosa',
                'status' => 200,
            ]);

        } catch (Exception $e) {

            return response()->json([
                'message' => 'Algo salio mal',
                'error' => $e,
                'status' => 400,
            ]);
        }
    }
}
